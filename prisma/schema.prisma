generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: Review address problem, if we will just create how a column or create a table with this data separing
// the information and just throw there or apply 3FN that we will need to create more tables like a state table?

// TODO: Review how access system will be.
model Users {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  isAdmin  Boolean? @default(false)
}

//TODO: to use "viacep" api to search for a new address if we haven't it in our db
// viacep: https://viacep.com.br
model Adresses {
  id             Int     @id @default(autoincrement())
  zip_code       String
  neighborhood   String
  public_place   String
  city           String
  state          String
  complement     String?
  address_number Int

  vendors   Vendors[]
  customers Customers[]
}

model Customers {
  id             Int      @id @default(autoincrement())
  status         Int
  address_id     Int
  credit_limit   Float
  debts          Float
  name           String
  phone          String
  cel_number     String
  email          String   @unique
  store_name     String
  // review this attr bellow, because don't make sense deliver to be a customer's attr.
  // collect/deliveries, should be a request's attr.
  deliver        Boolean
  pontalti       Boolean
  secondary_line Boolean
  cpf            String?  @unique
  cnpj           String?  @unique
  created_at     DateTime @default(now())
  updated_at     DateTime

  address Adresses @relation(fields: [address_id], references: [id])
}

// TODO: employee needs address.
// TODO: Some doubts in how classification will works and confirm if phone and cel_number will be required.
model Employees {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String
  phone          String
  cel_number     String
  cpf            String    @unique
  classification Int
  admission      DateTime
  salary         Float?
  dismissal_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  schedules EmployeeSchedules[]
  workHours EmployeeWorkHours[]
  vacations Vacations[]
}

// TODO: employee needs address.
// TODO: Study better the "Faturamento na compra" implementation
// TODO: Study better vendors business rules
model Vendors {
  id               Int      @id @default(autoincrement())
  name             String
  address_id       Int
  store_name       String
  cnpj             String   @unique
  status           Int
  phone            String
  cel_number       String
  deliver          Boolean
  volume_purchases Float
  purchases        Float
  invoicing        Float
  created_at       DateTime @default(now())
  updated_at       DateTime

  address Adresses @relation(fields: [address_id], references: [id])
}

// TODO: Study better vendors business rules
model Products {
  id           Int      @id @default(autoincrement())
  status       Int
  volume_sales Float
  sales        Float
  invoicing    Float
  name         String
  model        String
  size         String
  character    String
  moldes       Int
  equivalency  Float
  created_at   DateTime @default(now())
  updated_at   DateTime
}

// TODO: Study better vendors business rules
model Machines {
  id              Int      @id @default(autoincrement())
  model           String
  machine_number  Int
  status          Int
  location        String
  location_status Int
  created_at      DateTime @default(now())
  updated_at      DateTime
}

// TODO: Study better vendors business rules
model Procedures {
  id           Int      @id @default(autoincrement())
  process_name String
  status       Int
  workers      Int
  created_at   DateTime @default(now())
  updated_at   DateTime
}

model EmployeeSchedules {
  id          Int      @id @default(autoincrement())
  employee_id Int
  day_of_week Int
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime

  employee Employees @relation(fields: [employee_id], references: [id])

  @@index([employee_id, day_of_week], name: "employee_dayOfWeek_idx")
}

model EmployeeWorkHours {
  id          Int       @id @default(autoincrement())
  employee_id Int
  clock_in    DateTime
  clock_out   DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  employee Employees @relation(fields: [employee_id], references: [id])
}

model Vacations {
  id          Int       @id @default(autoincrement())
  employee_id Int
  last_vacation DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime @updatedAt

  employee Employees @relation(fields: [employee_id], references: [id])
}